# LINK COMMAND FILE AUTOMATICALLY GENERATED BY STVD7
# SHOULD NOT BE MANUALLY MODIFIED
#

# Put you segment configuration here
# define the .share segment when using compact or memory models only
#<BEGIN SEGMENT_CONF>
# Segment Code,Constants:
+seg .const -b 0x8080 -m 0x7f80 -n .const -it
+seg .text -a .const -n .text 
+seg .FLASH_CODE -a .text -n .FLASH_CODE 
+seg .FLASH_CONST -a .FLASH_CODE -n .FLASH_CONST 
# Segment Eeprom:
+seg .eeprom -b 0x4000 -m 0x400 -n .eeprom 
# Segment Zero Page:
+seg .bsct -b 0x0 -m 0x100 -n .bsct 
+seg .ubsct -a .bsct -n .ubsct 
+seg .bit -a .ubsct -n .bit -id
+seg .share -a .bit -n .share -is
# Segment Ram:
+seg .data -b 0x100 -m 0x500 -n .data 
+seg .bss -a .data -n .bss 
+seg .FLASH_CODE -a .bss -n boot_Ram -ic
#<END SEGMENT_CONF>


# Put you startup file here	(it depends on the model used)
#<BEGIN STARTUP_FILE>
crtsi0.sm8
#<END STARTUP_FILE>


# Put your object files here (they depend on you application)
#<BEGIN OBJECT_FILES>
Debug\stm8s_flash.o
Debug\main.o
Debug\stm8s_it.o
#<END OBJECT_FILES>


# Put your library name here (it depends on the model used)
#<BEGIN LIBRARY_FILES>
libis0.sm8
libm0.sm8
#<END LIBRARY_FILES>


# Put your interrupt vectors file here if needed
#<BEGIN VECTOR_FILE>
+seg .const -b 0x8000 -k
Debug\stm8_interrupt_vector.o
#<END VECTOR_FILE>

#<BEGIN DEFINED_VARIABLES>
+def __endzp=@.ubsct			# end of uninitialized zpage
+def __memory=@.bss				# end of bss segment
+def __stack=0x7ff
#<END DEFINED_VARIABLES>
